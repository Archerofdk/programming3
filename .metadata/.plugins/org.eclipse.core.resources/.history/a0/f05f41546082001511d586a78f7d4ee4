import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JApplet;
import java.util.Date;


public class AppletGetData extends JApplet implements Runnable
{
	private int screenX = 1920;
	private int screenY = 1080;
	private int n = 1;
	private int frames = 29;
	Thread writeToFile;
	Date date;
	boolean running = true;
	File file = new File("Test"+n+".txt");
	
	public void AppletGetData ()
	{
		
	}
	public void init ()
	{
		GetData getData = new GetData();
		writeToFile = new Thread(this);
		writeToFile.start();
		
		
	}
	public void destroy ()
	{
		running = false;
		writeToFile = null;
	}
	
	public void run()
	{
		
		BufferedWriter printOut = null;
		
		// If the filename already exists, it calls the method to do some recursion.
		if (file.exists())
		{
			checkFile(file);
		}
		
		if (!file.exists())
		{
			try {
				file.createNewFile();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		try {
			printOut = new BufferedWriter(new FileWriter(file));
		} catch (IOException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		}
		
		while(running)
		{
			frames++;
			if (frames == 30)
			{
				try {
					if (GetData.gX > 0 && GetData.gY > 0 && GetData.gX < screenX && GetData.gY < screenY)
					{
						printOut.write("x = " + GetData.gX+ " y = "+ GetData.gY +" at time: " + date);
						printOut.newLine();
						printOut.flush();
					}
					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}
				frames = 0;
			}
			
		}
		
	}
	
	//a recursive method that keeps adding 1 to n until the filename is free.
	public void checkFile(File file)
	{
		if (file.exists())
		{
			n++;
			file = new File("Test"+n+".txt");
			this.file = file;
			checkFile(file);
		}
	}
}
